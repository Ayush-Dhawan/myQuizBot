



const DataSet = [
    {
      index: 1,
      question: "What does OOPS stand for in Java?",
      answer: "Object-Oriented Programming System",
      options: [
        "Object-Oriented Programming Structure",
        "Object-Oriented Programming System",
        "Object-Oriented Program Source",
        "Object-Oriented Program Syntax"
      ],
      explanation: "OOPS in Java stands for Object-Oriented Programming System."
    },
    {
      index: 2,
      question: "What is a class in Java?",
      answer: "A blueprint for creating objects",
      options: [
        "A variable that holds primitive data types",
        "A predefined method in Java",
        "A blueprint for creating objects",
        "A conditional statement"
      ],
      explanation: "A class in Java serves as a blueprint for creating objects with specific attributes and behaviors."
    },
    {
      index: 3,
      question: "Which keyword is used to create an object in Java?",
      answer: "new",
      options: ["create", "new", "instantiate", "object"],
      explanation: "The 'new' keyword is used to create an object in Java."
    },
    {
      index: 4,
      question: "What is the purpose of the 'this' keyword in Java?",
      answer: "Refers to the current instance of the class",
      options: [
        "Refers to the parent class",
        "Refers to the current instance of the class",
        "Refers to a subclass instance",
        "Refers to the current method"
      ],
      explanation: "The 'this' keyword in Java is used to refer to the current instance of the class."
    },
    {
      index: 5,
      question: "What is an object in Java?",
      answer: "An instance of a class",
      options: [
        "A reserved keyword in Java",
        "A data structure",
        "An instance of a class",
        "A method in a class"
      ],
      explanation: "An object in Java is an instance of a class that can hold data and perform actions."
    },
    {
      index: 6,
      question: "What is inheritance in Java?",
      answer: "A mechanism for acquiring the properties and behaviors of a parent class",
      options: [
        "A way to hide class members from outside access",
        "A technique to create new classes",
        "A mechanism for acquiring the properties and behaviors of a parent class",
        "A method for defining static variables"
      ],
      explanation: "Inheritance in Java allows a subclass to acquire the properties and behaviors of a parent class."
    },
    {
      index: 7,
      question: "What is polymorphism in Java?",
      answer: "The ability of objects to take on multiple forms",
      options: [
        "The ability to perform multiple tasks simultaneously",
        "The ability to define multiple constructors in a class",
        "The ability of objects to take on multiple forms",
        "The ability to create multiple instances of a class"
      ],
      explanation: "Polymorphism in Java refers to the ability of objects to take on multiple forms and behave differently based on their actual types."
    },
    {
      index: 8,
      question: "What is encapsulation in Java?",
      answer: "The concept of bundling data and methods that operate on that data into a single unit",
      options: [
        "The process of hiding data from the user",
        "The concept of bundling data and methods that operate on that data into a single unit",
        "The practice of using private access modifiers",
        "The process of data conversion"
      ],
      explanation: "Encapsulation in Java involves bundling data and methods into a single unit, making it easier to manage and control access."
    },
    {
      index: 9,
      question: "What is a constructor in Java?",
      answer: "A special method to initialize objects",
      options: [
        "A method used for mathematical calculations",
        "A keyword for defining variables",
        "A special method to initialize objects",
        "A reserved keyword in Java"
      ],
      explanation: "A constructor in Java is a special method used to initialize objects when they are created."
    },
    {
      index: 10,
      question: "What is a default constructor in Java?",
      answer: "A constructor with no parameters provided",
      options: [
        "A constructor that is automatically generated by the compiler",
        "A constructor with no parameters provided",
        "A constructor that initializes all class members to default values",
        "A constructor with default access modifier"
      ],
      explanation: "A default constructor in Java is a constructor with no parameters provided. It may be automatically generated by the compiler."
    },
    {
      index: 11,
      question: "What is method overloading in Java?",
      answer: "Defining multiple methods in the same class with the same name but different parameters",
      options: [
        "Defining methods that perform the same task",
        "Defining methods with different access modifiers",
        "Defining multiple methods in the same class with the same name but different parameters",
        "Defining methods in multiple classes with the same name"
      ],
      explanation: "Method overloading in Java involves defining multiple methods in the same class with the same name but different parameters."
    },
    {
      index: 12,
      question: "What is method overriding in Java?",
      answer: "Providing a specific implementation of a method in a subclass that is already defined in its superclass",
      options: [
        "Providing multiple implementations of the same method in a class",
        "Providing a specific implementation of a method in a subclass that is already defined in its superclass",
        "Creating new methods in a subclass",
        "Overwriting existing methods in a class"
      ],
      explanation: "Method overriding in Java involves providing a specific implementation of a method in a subclass that is already defined in its superclass."
    },
    {
      index: 13,
      question: "What is the 'super' keyword used for in Java?",
      answer: "To refer to the superclass or parent class",
      options: [
        "To define a static variable",
        "To access private members of a class",
        "To refer to the subclass or child class",
        "To create an instance of a class"
      ],
      explanation: "The 'super' keyword in Java is used to refer to the superclass or parent class."
    },
    {
      index: 14,
      question: "What is a static method in Java?",
      answer: "A method that belongs to the class rather than an instance of the class",
      options: [
        "A method that is automatically called upon class instantiation",
        "A method that cannot be called by other classes",
        "A method that belongs to an instance of the class",
        "A method that belongs to the class rather than an instance of the class"
      ],
      explanation: "A static method in Java belongs to the class itself rather than being associated with an instance of the class."
    },
    {
      index: 15,
      question: "What is a static variable in Java?",
      answer: "A variable that belongs to the class rather than an instance of the class",
      options: [
        "A variable that can only be modified by a static method",
        "A variable that is automatically initialized to zero",
        "A variable that belongs to an instance of the class",
        "A variable that belongs to the class rather than an instance of the class"
      ],
      explanation: "A static variable in Java belongs to the class itself rather than being associated with an instance of the class."
    },
    {
      index: 16,
      question: "What is an abstract class in Java?",
      answer: "A class that cannot be instantiated and is meant to be subclassed",
      options: [
        "A class with only abstract methods",
        "A class with no methods",
        "A class that cannot be extended by other classes",
        "A class that cannot be instantiated and is meant to be subclassed"
      ],
      explanation: "An abstract class in Java is a class that cannot be instantiated and is designed to be subclassed by other classes."
    },
    {
      index: 17,
      question: "What is an interface in Java?",
      answer: "A collection of abstract methods that can be implemented by classes",
      options: [
        "A keyword for defining access modifiers",
        "A way to create multiple instances of a class",
        "A collection of concrete methods",
        "A collection of abstract methods that can be implemented by classes"
      ],
      explanation: "An interface in Java is a collection of abstract methods that can be implemented by classes, providing a contract for implementing classes."
    },
    {
      index: 18,
      question: "What is composition in Java?",
      answer: "A design principle where a class contains an object of another class as a member",
      options: [
        "A design principle where a class extends another class",
        "A design principle where a class inherits from multiple classes",
        "A design principle where a class is extended by another class",
        "A design principle where a class contains an object of another class as a member"
      ],
      explanation: "Composition in Java is a design principle where a class contains an object of another class as a member."
    },
    {
      index: 19,
      question: "What is an instance variable in Java?",
      answer: "A variable that belongs to an instance of a class",
      options: [
        "A variable that belongs to the class itself",
        "A variable that is automatically initialized to zero",
        "A variable that cannot be accessed from outside the class",
        "A variable that belongs to an instance of a class"
      ],
      explanation: "An instance variable in Java is a variable that belongs to an instance (object) of a class."
    },
    {
      index: 20,
      question: "What is method hiding in Java?",
      answer: "When a subclass defines a static method with the same name as a static method in the superclass",
      options: [
        "When a subclass overrides a static method in the superclass",
        "When a subclass defines a static method with a different name from the superclass",
        "When a subclass defines an instance method with the same name as an instance method in the superclass",
        "When a subclass defines a static method with the same name as a static method in the superclass"
      ],
      explanation: "Method hiding in Java occurs when a subclass defines a static method with the same name as a static method in the superclass."
    },
    {
      index: 21,
      question: "What is a constructor chaining in Java?",
      answer: "Calling one constructor from another constructor within the same class",
      options: [
        "Calling constructors of multiple classes in a chain",
        "Initializing multiple objects in the same constructor",
        "Calling one constructor from another constructor within the same class",
        "Chaining multiple objects together"
      ],
      explanation: "Constructor chaining in Java involves calling one constructor from another constructor within the same class."
    },
    {
      index: 22,
      question: "What is a final class in Java?",
      answer: "A class that cannot be extended by other classes",
      options: [
        "A class that cannot be instantiated",
        "A class with no methods",
        "A class that cannot contain static members",
        "A class that cannot be extended by other classes"
      ],
      explanation: "A final class in Java is a class that cannot be extended by other classes."
    },
    {
      index: 23,
      question: "What is the 'instanceof' operator used for in Java?",
      answer: "To check if an object is an instance of a particular class or interface",
      options: [
        "To compare two instances of a class",
        "To check if an object is null",
        "To check if an object is immutable",
        "To check if an object is an instance of a particular class or interface"
      ],
      explanation: "The 'instanceof' operator in Java is used to check if an object is an instance of a particular class or interface."
    },
    {
      index: 24,
      question: "What is method signature in Java?",
      answer: "The combination of a method's name and parameter list",
      options: [
        "The access modifier of a method",
        "The method's return type",
        "The method's documentation",
        "The combination of a method's name and parameter list"
      ],
      explanation: "The method signature in Java is defined by the combination of a method's name and parameter list."
    },
    {
      index: 25,
      question: "What is method overloading in Java?",
      answer: "Defining multiple methods in the same class with the same name but different parameters",
      options: [
        "Defining methods that perform the same task",
        "Defining methods with different access modifiers",
        "Defining multiple methods in the same class with the same name but different parameters",
        "Defining methods in multiple classes with the same name"
      ],
      explanation: "Method overloading in Java involves defining multiple methods in the same class with the same name but different parameters."
    },
    {
      index: 26,
      question: "What is a default constructor in Java?",
      answer: "A constructor with no parameters provided",
      options: [
        "A constructor that is automatically generated by the compiler",
        "A constructor with no parameters provided",
        "A constructor that initializes all class members to default values",
        "A constructor with default access modifier"
      ],
      explanation: "A default constructor in Java is a constructor with no parameters provided. It may be automatically generated by the compiler."
    },
    {
      index: 27,
      question: "What is dynamic method dispatch in Java?",
      answer: "The process of determining the method to invoke at runtime based on the actual object type",
      options: [
        "The process of invoking static methods",
        "The process of determining the method to invoke at compile time",
        "The process of invoking private methods",
        "The process of determining the method to invoke at runtime based on the actual object type"
      ],
      explanation: "Dynamic method dispatch in Java is the process of determining the method to invoke at runtime based on the actual object type."
    },
    {
      index: 28,
      question: "What is the 'final' keyword used for in Java?",
      answer: "To make a variable, method, or class unchangeable",
      options: [
        "To specify the final value of a variable",
        "To declare a variable as global",
        "To make a method accessible from any class",
        "To make a variable, method, or class unchangeable"
      ],
      explanation: "The 'final' keyword in Java is used to make a variable, method, or class unchangeable."
    },
    {
      index: 29,
      question: "What is a package in Java?",
      answer: "A way to organize related classes and interfaces",
      options: [
        "A container for data",
        "A way to define global variables",
        "A way to organize related methods",
        "A way to organize related classes and interfaces"
      ],
      explanation: "A package in Java is used to organize related classes and interfaces into a single namespace."
    },
    {
      index: 30,
      question: "What is a static block in Java?",
      answer: "A block of code that runs when a class is loaded into memory",
      options: [
        "A block of code that runs when an object is created",
        "A block of code that is executed after the main method",
        "A block of code that can be executed at any time",
        "A block of code that runs when a class is loaded into memory"
      ],
      explanation: "A static block in Java is a block of code that runs when a class is loaded into memory."
    },
    {
      index: 31,
      question: "What is the purpose of the 'transient' keyword in Java?",
      answer: "To indicate that a variable should not be serialized",
      options: [
        "To make a variable accessible from any class",
        "To specify the default value of a variable",
        "To indicate that a variable should not be used",
        "To indicate that a variable should not be serialized"
      ],
      explanation: "The 'transient' keyword in Java is used to indicate that a variable should not be serialized when the object is written to a stream."
    },
    {
      index: 32,
      question: "What is a singleton class in Java?",
      answer: "A class that allows only one instance to be created",
      options: [
        "A class with a single method",
        "A class with no methods",
        "A class that allows multiple instances to be created",
        "A class that allows only one instance to be created"
      ],
      explanation: "A singleton class in Java is a class that restricts the instantiation of only one instance."
    },
    {
      index: 33,
      question: "What is method overriding in Java?",
      answer: "Providing a specific implementation of a method in a subclass that is already defined in its superclass",
      options: [
        "Providing multiple implementations of the same method in a class",
        "Providing a specific implementation of a method in a subclass that is already defined in its superclass",
        "Creating new methods in a subclass",
        "Overwriting existing methods in a class"
      ],
      explanation: "Method overriding in Java involves providing a specific implementation of a method in a subclass that is already defined in its superclass."
    },
    {
      index: 34,
      question: "What is the purpose of the 'throws' keyword in Java?",
      answer: "To declare exceptions that a method may throw",
      options: [
        "To catch exceptions in a try-catch block",
        "To specify the return type of a method",
        "To declare exceptions that a method may throw",
        "To indicate that a method is a constructor"
      ],
      explanation: "The 'throws' keyword in Java is used to declare exceptions that a method may throw, allowing the caller to handle those exceptions."
    },
    {
      index: 35,
      question: "What is the 'try-catch' block used for in Java?",
      answer: "To handle exceptions and perform error recovery",
      options: [
        "To declare variables",
        "To create objects",
        "To handle exceptions and perform error recovery",
        "To define methods"
      ],
      explanation: "The 'try-catch' block in Java is used to handle exceptions and perform error recovery when exceptions occur during the execution of code within the 'try' block."
    },
    {
      index: 36,
      question: "What is a checked exception in Java?",
      answer: "An exception that is checked at compile time",
      options: [
        "An exception that is checked at runtime",
        "An exception that is intentionally thrown",
        "An exception that is not caught by the 'catch' block",
        "An exception that is checked at compile time"
      ],
      explanation: "A checked exception in Java is an exception that is checked at compile time, meaning it must be handled or declared by the programmer."
    },
    {
      index: 37,
      question: "What is the purpose of the 'finally' block in Java?",
      answer: "To specify code that always executes, whether an exception is thrown or not",
      options: [
        "To catch exceptions",
        "To terminate the program",
        "To specify code that only runs when no exception is thrown",
        "To specify code that always executes, whether an exception is thrown or not"
      ],
      explanation: "The 'finally' block in Java is used to specify code that always executes, whether an exception is thrown or not."
    },
    {
      index: 38,
      question: "What is method overloading in Java?",
      answer: "Defining multiple methods in the same class with the same name but different parameters",
      options: [
        "Defining methods that perform the same task",
        "Defining methods with different access modifiers",
        "Defining multiple methods in the same class with the same name but different parameters",
        "Defining methods in multiple classes with the same name"
      ],
      explanation: "Method overloading in Java involves defining multiple methods in the same class with the same name but different parameters."
    },
    {
      index: 39,
      question: "What is the purpose of the 'throws' keyword in Java?",
      answer: "To declare exceptions that a method may throw",
      options: [
        "To catch exceptions in a try-catch block",
        "To specify the return type of a method",
        "To declare exceptions that a method may throw",
        "To indicate that a method is a constructor"
      ],
      explanation: "The 'throws' keyword in Java is used to declare exceptions that a method may throw, allowing the caller to handle those exceptions."
    },
    {
      index: 40,
      question: "What is the 'try-catch' block used for in Java?",
      answer: "To handle exceptions and perform error recovery",
      options: [
        "To declare variables",
        "To create objects",
        "To handle exceptions and perform error recovery",
        "To define methods"
      ],
      explanation: "The 'try-catch' block in Java is used to handle exceptions and perform error recovery when exceptions occur during the execution of code within the 'try' block."
    },
    {
      index: 41,
      question: "What is a checked exception in Java?",
      answer: "An exception that is checked at compile time",
      options: [
        "An exception that is checked at runtime",
        "An exception that is intentionally thrown",
        "An exception that is not caught by the 'catch' block",
        "An exception that is checked at compile time"
      ],
      explanation: "A checked exception in Java is an exception that is checked at compile time, meaning it must be handled or declared by the programmer."
    },
    {
      index: 42,
      question: "What is the purpose of the 'finally' block in Java?",
      answer: "To specify code that always executes, whether an exception is thrown or not",
      options: [
        "To catch exceptions",
        "To terminate the program",
        "To specify code that only runs when no exception is thrown",
        "To specify code that always executes, whether an exception is thrown or not"
      ],
      explanation: "The 'finally' block in Java is used to specify code that always executes, whether an exception is thrown or not."
    },
    {
      index: 43,
      question: "What is a custom exception in Java?",
      answer: "An exception created by the programmer to handle specific error conditions",
      options: [
        "An exception defined by the Java language",
        "An exception thrown by the JVM",
        "An exception that cannot be caught",
        "An exception created by the programmer to handle specific error conditions"
      ],
      explanation: "A custom exception in Java is an exception created by the programmer to handle specific error conditions in their code."
    },
    {
      index: 44,
      question: "What is the purpose of the 'throw' keyword in Java?",
      answer: "To explicitly throw an exception",
      options: [
        "To catch an exception",
        "To declare a variable",
        "To create an object",
        "To explicitly throw an exception"
      ],
      explanation: "The 'throw' keyword in Java is used to explicitly throw an exception in the code."
    },
    {
      index: 45,
      question: "What is the 'assert' statement in Java?",
      answer: "A debugging aid that tests a condition and throws an error if it's false",
      options: [
        "A statement used to define a new class",
        "A statement that initializes variables",
        "A statement used for database operations",
        "A debugging aid that tests a condition and throws an error if it's false"
      ],
      explanation: "The 'assert' statement in Java is a debugging aid that tests a condition and throws an error if the condition is false."
    },
    {
      index: 46,
      question: "What is a lambda expression in Java?",
      answer: "An anonymous function that can be used to implement a single-method interface",
      options: [
        "A method defined inside a class",
        "A built-in function in Java",
        "A data structure",
        "An anonymous function that can be used to implement a single-method interface"
      ],
      explanation: "A lambda expression in Java is an anonymous function that can be used to implement a single-method interface."
    },
    {
      index: 47,
      question: "What is the 'stream' API in Java?",
      answer: "A library for processing sequences of data elements",
      options: [
        "A library for input and output operations",
        "A library for managing database connections",
        "A library for creating GUI components",
        "A library for processing sequences of data elements"
      ],
      explanation: "The 'stream' API in Java is a library for processing sequences of data elements, allowing for functional-style operations on data."
    },
    {
      index: 48,
      question: "What is the purpose of the 'try-with-resources' statement in Java?",
      answer: "To automatically close resources like files and sockets after they are no longer needed",
      options: [
        "To declare variables",
        "To catch exceptions",
        "To create objects",
        "To automatically close resources like files and sockets after they are no longer needed"
      ],
      explanation: "The 'try-with-resources' statement in Java is used to automatically close resources like files and sockets after they are no longer needed, improving resource management."
    },
    {
      index: 49,
      question: "What is the purpose of the 'var' keyword in Java?",
      answer: "To declare local variables with inferred types",
      options: [
        "To declare global variables",
        "To specify access modifiers",
        "To declare constant variables",
        "To declare local variables with inferred types"
      ],
      explanation: "The 'var' keyword in Java is used to declare local variables with inferred types, reducing the need for explicit type declarations."
    },
    {
      index: 50,
      question: "What is a functional interface in Java?",
      answer: "An interface with a single abstract method that can be implemented using lambda expressions",
      options: [
        "An interface with multiple abstract methods",
        "An interface that cannot be implemented",
        "A built-in class in Java",
        "An interface with a single abstract method that can be implemented using lambda expressions"
      ],
      explanation: "A functional interface in Java is an interface with a single abstract method that can be implemented using lambda expressions, enabling functional programming features."
    }
  ];
  

  


//logic

const question = document.getElementById('question');
const option0 = document.getElementById('0');
const option1 = document.getElementById('1');
const option2 = document.getElementById('2');
const option3 = document.getElementById('3');
const listItems = document.querySelectorAll('.list-group-item');
const checkboxes = document.querySelectorAll('.checkboxes');
const answerDescription = document.querySelector('.answer-description');
const n = DataSet.length;
const min = 0;
const max = n;

let i = 0; // Initialize i here
let score = 0;
let usedQuestionIndices = []; // Initialize usedQuestionIndices here

function getRandomQuestionIndex() {
  let randomIndex;
  do {
    randomIndex = Math.floor(Math.random() * n);
  } while (usedQuestionIndices.includes(randomIndex));
  usedQuestionIndices.push(randomIndex);
  return randomIndex;
}


function loadQuestion(arr) {
    checkboxes.forEach((checkbox) => {
      checkbox.checked = false;
      checkbox.removeEventListener('click', handleCheckboxClick); // Remove old event listeners
    });

    checkboxes.forEach((checkbox) => {
        checkbox.nextSibling.textContent = '';
      });
  
    answerDescription.innerHTML = "";
  
    if (i >= 5) {
      // Handle end of the quiz or reset as needed
      question.textContent = "Quiz Complete";
      option0.textContent = "";
      option1.textContent = "";
      option2.textContent = "";
      option3.textContent = "";
      answerDescription.innerHTML = `You Scored: ${score} / 5`;
      usedQuestionIndices = [];
      i = 0;
      return;
    }
  
    const randomWholeNumber = getRandomQuestionIndex();
    const randomQuestion = DataSet[randomWholeNumber].question;
    question.textContent = randomQuestion;
  
    option0.textContent = DataSet[randomWholeNumber].options[0];
    option1.textContent = DataSet[randomWholeNumber].options[1];
    option2.textContent = DataSet[randomWholeNumber].options[2];
    option3.textContent = DataSet[randomWholeNumber].options[3];
  
    checkboxes.forEach((checkbox, index) => {
      checkbox.disabled = false;
      checkbox.classList.remove('btn-success', 'btn-danger');
      if (index === 0) {
        checkbox.classList.add('btn-primary');
      }
    });
  
    checkboxes.forEach((checkbox, index) => {
      checkbox.addEventListener('click', handleCheckboxClick); // Add new event listeners
    });
  }
  
  function handleCheckboxClick(event) {
    i += 1;
    console.log(i);
    checkboxes.forEach((cb) => {
      cb.disabled = true;
    });
  
    const selectedCheckbox = event.target;

    if(selectedCheckbox.id === 'checkbox1') index = 1
    else if(selectedCheckbox.id === 'checkbox0') index = 0
    else if(selectedCheckbox.id === 'checkbox2') index = 2
    else index = 3
    // const index = parseInt(selectedCheckbox.id);
  
    const randomWholeNumber = usedQuestionIndices[usedQuestionIndices.length - 1];
    const correctAnswerIndex = DataSet[randomWholeNumber].options.indexOf(DataSet[randomWholeNumber].answer);
  
    if (index === correctAnswerIndex) {
        selectedCheckbox.nextSibling.textContent = 'Correct';
      score += 1;
    } else {
        selectedCheckbox.nextSibling.textContent = 'Wrong';
    }
  
    answerDescription.innerHTML = DataSet[randomWholeNumber].explanation;
  
    // setTimeout(() => {
    //   loadQuestion();
    // }, 2000);
  }

  const reset = document.querySelector('.reset');
  const next = document.querySelector('.next');

  reset.addEventListener('click', ()=>{
    i = 0;
    score = 0;
    usedQuestionIndices = []
    loadQuestion()
  })

  next.addEventListener('click',() => loadQuestion())
  
  
  loadQuestion();
  